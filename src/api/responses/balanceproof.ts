// SPDX-License-Identifier: Apache-2.0
"use strict";

import {
	TypedJSON,
	jsonObject,
	jsonMember,
	jsonBigIntMember,
} from "#erdstall/export/typedjson";
import { customJSON } from "#erdstall/api/util";
import { ChainAssets } from "#erdstall/ledger/assets";
import { Address, Signature } from "#erdstall/ledger";
import { ErdstallObject, registerErdstallType } from "#erdstall/api";
import { Backend } from "#erdstall/ledger/backend";
import { Signer } from "#erdstall/ledger/backend/signer";

const balanceProofsTypeName = "BalanceProofs";

// Balance is the value of funds for the account within epoch.
@jsonObject
export class Balance {
	@jsonBigIntMember() epoch: bigint;
	@jsonMember(Address) account: Address<Backend>;
	@jsonMember(Boolean) exit: boolean;
	@jsonMember(() => ChainAssets) values: ChainAssets;

	constructor(
		epoch: bigint,
		account: Address<Backend> | string,
		exit: boolean,
		values: ChainAssets,
	) {
		this.epoch = epoch;
		this.account = Address.ensure(account);
		this.exit = exit;
		this.values = values;
	}

	async sign<B extends Backend>(_signer: Signer<B>): Promise<BalanceProof> {
		throw new Error("not implemented");
		// const sig = await signer.signMessage(this.packTagged().keccak256());
		// return new BalanceProof(this, new Signature(sig));
	}
}

// A BalanceProof is generated by the Enclave at the end of each transaction
// phase for each account in the Erdstall system.
//
// TODO: We can index the balanceproofs by their respective backend because
// balance proofs will be issued on a per-backend basis.
@jsonObject
export class BalanceProof {
	@jsonMember(Balance)
	readonly balance: Balance;
	@jsonMember(Signature)
	readonly sig: Signature<Backend>;

	constructor(balance: Balance, signature: Signature<Backend>) {
		this.balance = balance;
		this.sig = signature;
	}
}

@jsonObject
export class BalanceProofs extends ErdstallObject {
	public map: Map<string, BalanceProof>;
	constructor() {
		super();
		this.map = new Map<string, BalanceProof>();
	}

	static toJSON(me: BalanceProofs): any {
		var obj: any = {};
		me.map.forEach((bp, addr) => {
			obj[addr] = JSON.parse(TypedJSON.stringify(bp, BalanceProof));
		});
		return obj;
	}

	static fromJSON(data: any): BalanceProofs {
		const bps = new BalanceProofs();
		for (const addr in data) {
			bps.map.set(
				addr,
				TypedJSON.parse(JSON.stringify(data[addr]), BalanceProof)!,
			);
		}
		return bps;
	}

	public objectType() {
		return BalanceProofs;
	}
	protected objectTypeName() {
		return balanceProofsTypeName;
	}
}

registerErdstallType(balanceProofsTypeName, BalanceProofs);
customJSON(BalanceProofs);
