// SPDX-License-Identifier: Apache-2.0
"use strict";

import { jsonObject, jsonMember } from "typedjson";
import { BigInteger } from "../util";
import { Assets } from "../../ledger/assets";
import { Address } from "../../ledger";
import { Signature } from "../signature";
import { ErdstallObject } from "../object";

// Balance is the value of funds for the account within epoch.
@jsonObject export class Balance {
	@jsonMember(BigInteger) epoch: BigInteger;
	@jsonMember(Address) account: Address;
	@jsonMember(Boolean) exit: boolean;
	@jsonMember(Assets) values: Assets;

	constructor(
		epoch: bigint,
		address: Address,
		exit: boolean,
		values: Assets
	) {
		this.epoch = new BigInteger(epoch);
		this.account = address;
		this.exit = exit;
		this.values = values;
	}
}

// A BalanceProof is generated by the Enclave at the end of each transaction
// phase for each account in the Erdstall system.
@jsonObject export class BalanceProof extends ErdstallObject {
	@jsonMember(Balance) balance: Balance;
	@jsonMember(Signature) sig: Signature;

	constructor(balance: Balance, signature: Signature) {
		super();
		this.balance = balance;
		this.sig = signature;
	}

	protected objectType(): any { return BalanceProof; }
	protected objectTypeName(): string { return "BalanceProof"; }
}