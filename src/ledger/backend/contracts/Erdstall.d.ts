/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ErdstallInterface extends ethers.utils.Interface {
  functions: {
    "bigBang()": FunctionFragment;
    "challenge(tuple,bytes)": FunctionFragment;
    "challengeDeposit()": FunctionFragment;
    "challenges(uint64,address)": FunctionFragment;
    "deposit(address,address,bytes)": FunctionFragment;
    "deposits(uint64,address,uint256)": FunctionFragment;
    "encodeBalanceProof(tuple)": FunctionFragment;
    "ensureFrozen()": FunctionFragment;
    "epochDuration()": FunctionFragment;
    "frozenEpoch()": FunctionFragment;
    "numChallenges(uint64)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerToken(address,address)": FunctionFragment;
    "registerTokenType(address,string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "respondChallenge(tuple,bytes)": FunctionFragment;
    "tee()": FunctionFragment;
    "tokenHolders(address)": FunctionFragment;
    "tokenTypes(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifyBalance(tuple,bytes)": FunctionFragment;
    "withdraw(tuple,bytes)": FunctionFragment;
    "withdrawFrozen(tuple,bytes)": FunctionFragment;
    "withdrawFrozenDeposit()": FunctionFragment;
    "withdrawn(uint64,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bigBang", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "challenge",
    values: [
      {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "challengeDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "challenges",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeBalanceProof",
    values: [
      {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ensureFrozen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "frozenEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numChallenges",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTokenType",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "respondChallenge",
    values: [
      {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "tee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenHolders",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "tokenTypes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyBalance",
    values: [
      {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFrozen",
    values: [
      {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFrozenDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawn",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "bigBang", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "challenge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "challengeDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "challenges", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "encodeBalanceProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ensureFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "frozenEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numChallenges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTokenType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "respondChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenTypes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFrozenDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawn", data: BytesLike): Result;

  events: {
    "ChallengeResponded(uint64,address,tuple[],bytes)": EventFragment;
    "Challenged(uint64,address)": EventFragment;
    "Deposited(uint64,address,address,bytes)": EventFragment;
    "Frozen(uint64)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TokenRegistered(address,string,address)": EventFragment;
    "TokenTypeRegistered(string,address)": EventFragment;
    "Withdrawn(uint64,address,tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChallengeResponded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Challenged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Frozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenTypeRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class Erdstall extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ErdstallInterface;

  functions: {
    bigBang(overrides?: CallOverrides): Promise<[BigNumber]>;

    challenge(
      balance: {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    challengeDeposit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    challenges(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    deposit(
      depositor: string,
      token: string,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposits(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { token: string; value: string }>;

    encodeBalanceProof(
      balance: {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    ensureFrozen(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    epochDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    frozenEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    numChallenges(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerToken(
      token: string,
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerTokenType(
      holder: string,
      tokenType: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    respondChallenge(
      balance: {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tee(overrides?: CallOverrides): Promise<[string]>;

    tokenHolders(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    tokenTypes(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyBalance(
      balance: {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    withdraw(
      balance: {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFrozen(
      balance: {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFrozenDeposit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawn(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  bigBang(overrides?: CallOverrides): Promise<BigNumber>;

  challenge(
    balance: {
      epoch: BigNumberish;
      account: string;
      exit: boolean;
      tokens: { token: string; value: BytesLike }[];
    },
    sig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  challengeDeposit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  challenges(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deposit(
    depositor: string,
    token: string,
    value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposits(
    arg0: BigNumberish,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { token: string; value: string }>;

  encodeBalanceProof(
    balance: {
      epoch: BigNumberish;
      account: string;
      exit: boolean;
      tokens: { token: string; value: BytesLike }[];
    },
    overrides?: CallOverrides
  ): Promise<string>;

  ensureFrozen(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

  frozenEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  numChallenges(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerToken(
    token: string,
    holder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerTokenType(
    holder: string,
    tokenType: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  respondChallenge(
    balance: {
      epoch: BigNumberish;
      account: string;
      exit: boolean;
      tokens: { token: string; value: BytesLike }[];
    },
    sig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tee(overrides?: CallOverrides): Promise<string>;

  tokenHolders(arg0: string, overrides?: CallOverrides): Promise<string>;

  tokenTypes(arg0: string, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyBalance(
    balance: {
      epoch: BigNumberish;
      account: string;
      exit: boolean;
      tokens: { token: string; value: BytesLike }[];
    },
    sig: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  withdraw(
    balance: {
      epoch: BigNumberish;
      account: string;
      exit: boolean;
      tokens: { token: string; value: BytesLike }[];
    },
    sig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFrozen(
    balance: {
      epoch: BigNumberish;
      account: string;
      exit: boolean;
      tokens: { token: string; value: BytesLike }[];
    },
    sig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFrozenDeposit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawn(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    bigBang(overrides?: CallOverrides): Promise<BigNumber>;

    challenge(
      balance: {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    challengeDeposit(overrides?: CallOverrides): Promise<void>;

    challenges(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      depositor: string,
      token: string,
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    deposits(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { token: string; value: string }>;

    encodeBalanceProof(
      balance: {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      overrides?: CallOverrides
    ): Promise<string>;

    ensureFrozen(overrides?: CallOverrides): Promise<void>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    frozenEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    numChallenges(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerToken(
      token: string,
      holder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerTokenType(
      holder: string,
      tokenType: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    respondChallenge(
      balance: {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    tee(overrides?: CallOverrides): Promise<string>;

    tokenHolders(arg0: string, overrides?: CallOverrides): Promise<string>;

    tokenTypes(arg0: string, overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyBalance(
      balance: {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      balance: {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFrozen(
      balance: {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFrozenDeposit(overrides?: CallOverrides): Promise<void>;

    withdrawn(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    ChallengeResponded(
      epoch?: BigNumberish | null,
      account?: string | null,
      tokens?: null,
      sig?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        ([string, string] & { token: string; value: string })[],
        string
      ],
      {
        epoch: BigNumber;
        account: string;
        tokens: ([string, string] & { token: string; value: string })[];
        sig: string;
      }
    >;

    Challenged(
      epoch?: BigNumberish | null,
      account?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { epoch: BigNumber; account: string }
    >;

    Deposited(
      epoch?: BigNumberish | null,
      account?: string | null,
      token?: null,
      value?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string],
      { epoch: BigNumber; account: string; token: string; value: string }
    >;

    Frozen(
      epoch?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { epoch: BigNumber }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    TokenRegistered(
      token?: string | null,
      tokenType?: null,
      tokenHolder?: null
    ): TypedEventFilter<
      [string, string, string],
      { token: string; tokenType: string; tokenHolder: string }
    >;

    TokenTypeRegistered(
      tokenType?: null,
      tokenHolder?: null
    ): TypedEventFilter<
      [string, string],
      { tokenType: string; tokenHolder: string }
    >;

    Withdrawn(
      epoch?: BigNumberish | null,
      account?: string | null,
      tokens?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        ([string, string] & { token: string; value: string })[]
      ],
      {
        epoch: BigNumber;
        account: string;
        tokens: ([string, string] & { token: string; value: string })[];
      }
    >;
  };

  estimateGas: {
    bigBang(overrides?: CallOverrides): Promise<BigNumber>;

    challenge(
      balance: {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    challengeDeposit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    challenges(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      depositor: string,
      token: string,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposits(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeBalanceProof(
      balance: {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ensureFrozen(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    frozenEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    numChallenges(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerToken(
      token: string,
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerTokenType(
      holder: string,
      tokenType: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    respondChallenge(
      balance: {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tee(overrides?: CallOverrides): Promise<BigNumber>;

    tokenHolders(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tokenTypes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyBalance(
      balance: {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      balance: {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFrozen(
      balance: {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFrozenDeposit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawn(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bigBang(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    challenge(
      balance: {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    challengeDeposit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    challenges(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      depositor: string,
      token: string,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeBalanceProof(
      balance: {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ensureFrozen(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    epochDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    frozenEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numChallenges(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerToken(
      token: string,
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerTokenType(
      holder: string,
      tokenType: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    respondChallenge(
      balance: {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenHolders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenTypes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyBalance(
      balance: {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      balance: {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFrozen(
      balance: {
        epoch: BigNumberish;
        account: string;
        exit: boolean;
        tokens: { token: string; value: BytesLike }[];
      },
      sig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFrozenDeposit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawn(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
