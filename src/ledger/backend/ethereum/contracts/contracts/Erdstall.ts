/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Erdstall {
  export type AssetStruct = {
    origin: PromiseOrValue<BigNumberish>;
    assetType: PromiseOrValue<BigNumberish>;
    localID: PromiseOrValue<BytesLike>;
  };

  export type AssetStructOutput = [number, number, string] & {
    origin: number;
    assetType: number;
    localID: string;
  };

  export type TokenValueStruct = {
    asset: Erdstall.AssetStruct;
    value: PromiseOrValue<BigNumberish>[];
  };

  export type TokenValueStructOutput = [
    Erdstall.AssetStructOutput,
    BigNumber[]
  ] & { asset: Erdstall.AssetStructOutput; value: BigNumber[] };

  export type BalanceStruct = {
    epoch: PromiseOrValue<BigNumberish>;
    chain: PromiseOrValue<BigNumberish>;
    account: PromiseOrValue<string>;
    exit: PromiseOrValue<boolean>;
    tokens: Erdstall.TokenValueStruct[];
  };

  export type BalanceStructOutput = [
    BigNumber,
    number,
    string,
    boolean,
    Erdstall.TokenValueStructOutput[]
  ] & {
    epoch: BigNumber;
    chain: number;
    account: string;
    exit: boolean;
    tokens: Erdstall.TokenValueStructOutput[];
  };
}

export interface ErdstallInterface extends utils.Interface {
  functions: {
    "bigBangTime()": FunctionFragment;
    "chainID()": FunctionFragment;
    "challenge((uint64,uint16,address,bool,((uint16,uint8,bytes32),uint256[])[]),bytes)": FunctionFragment;
    "challengeDeposit()": FunctionFragment;
    "challenges(uint64,address)": FunctionFragment;
    "deployBlockNum()": FunctionFragment;
    "deposit(address,uint8,uint16,bytes32,uint256[])": FunctionFragment;
    "deposits(uint64,address,uint256)": FunctionFragment;
    "encodeBalanceProof((uint64,uint16,address,bool,((uint16,uint8,bytes32),uint256[])[]))": FunctionFragment;
    "ensureFrozen()": FunctionFragment;
    "epochDuration()": FunctionFragment;
    "frozenEpoch()": FunctionFragment;
    "holderTypes(address)": FunctionFragment;
    "numChallenges(uint64)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerTokenType(address,uint8)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "respondChallenge((uint64,uint16,address,bool,((uint16,uint8,bytes32),uint256[])[]),bytes)": FunctionFragment;
    "tee()": FunctionFragment;
    "tokenHolders(uint8)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifyBalance((uint64,uint16,address,bool,((uint16,uint8,bytes32),uint256[])[]),bytes)": FunctionFragment;
    "withdraw((uint64,uint16,address,bool,((uint16,uint8,bytes32),uint256[])[]),bytes)": FunctionFragment;
    "withdrawFrozen((uint64,uint16,address,bool,((uint16,uint8,bytes32),uint256[])[]),bytes)": FunctionFragment;
    "withdrawFrozenDeposit()": FunctionFragment;
    "withdrawn(uint64,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bigBangTime"
      | "chainID"
      | "challenge"
      | "challengeDeposit"
      | "challenges"
      | "deployBlockNum"
      | "deposit"
      | "deposits"
      | "encodeBalanceProof"
      | "ensureFrozen"
      | "epochDuration"
      | "frozenEpoch"
      | "holderTypes"
      | "numChallenges"
      | "owner"
      | "registerTokenType"
      | "renounceOwnership"
      | "respondChallenge"
      | "tee"
      | "tokenHolders"
      | "transferOwnership"
      | "verifyBalance"
      | "withdraw"
      | "withdrawFrozen"
      | "withdrawFrozenDeposit"
      | "withdrawn"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bigBangTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "chainID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "challenge",
    values: [Erdstall.BalanceStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "challengeDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "challenges",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deployBlockNum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeBalanceProof",
    values: [Erdstall.BalanceStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "ensureFrozen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "frozenEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "holderTypes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "numChallenges",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerTokenType",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "respondChallenge",
    values: [Erdstall.BalanceStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "tee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenHolders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyBalance",
    values: [Erdstall.BalanceStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [Erdstall.BalanceStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFrozen",
    values: [Erdstall.BalanceStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFrozenDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawn",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "bigBangTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "challenge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "challengeDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "challenges", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployBlockNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "encodeBalanceProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ensureFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "frozenEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "holderTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numChallenges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerTokenType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "respondChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFrozenDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawn", data: BytesLike): Result;

  events: {
    "ChallengeResponded(uint64,address,tuple[],bytes)": EventFragment;
    "Challenged(uint64,address)": EventFragment;
    "Deposited(uint64,address,tuple)": EventFragment;
    "Frozen(uint64)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TokenTypeRegistered(uint8,address)": EventFragment;
    "WithdrawalException(uint64,address,tuple,bytes)": EventFragment;
    "Withdrawn(uint64,address,tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChallengeResponded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Challenged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Frozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenTypeRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalException"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface ChallengeRespondedEventObject {
  epoch: BigNumber;
  account: string;
  tokens: Erdstall.TokenValueStructOutput[];
  sig: string;
}
export type ChallengeRespondedEvent = TypedEvent<
  [BigNumber, string, Erdstall.TokenValueStructOutput[], string],
  ChallengeRespondedEventObject
>;

export type ChallengeRespondedEventFilter =
  TypedEventFilter<ChallengeRespondedEvent>;

export interface ChallengedEventObject {
  epoch: BigNumber;
  account: string;
}
export type ChallengedEvent = TypedEvent<
  [BigNumber, string],
  ChallengedEventObject
>;

export type ChallengedEventFilter = TypedEventFilter<ChallengedEvent>;

export interface DepositedEventObject {
  epoch: BigNumber;
  account: string;
  value: Erdstall.TokenValueStructOutput;
}
export type DepositedEvent = TypedEvent<
  [BigNumber, string, Erdstall.TokenValueStructOutput],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface FrozenEventObject {
  epoch: BigNumber;
}
export type FrozenEvent = TypedEvent<[BigNumber], FrozenEventObject>;

export type FrozenEventFilter = TypedEventFilter<FrozenEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TokenTypeRegisteredEventObject {
  assetType: number;
  tokenHolder: string;
}
export type TokenTypeRegisteredEvent = TypedEvent<
  [number, string],
  TokenTypeRegisteredEventObject
>;

export type TokenTypeRegisteredEventFilter =
  TypedEventFilter<TokenTypeRegisteredEvent>;

export interface WithdrawalExceptionEventObject {
  epoch: BigNumber;
  account: string;
  token: Erdstall.TokenValueStructOutput;
  error: string;
}
export type WithdrawalExceptionEvent = TypedEvent<
  [BigNumber, string, Erdstall.TokenValueStructOutput, string],
  WithdrawalExceptionEventObject
>;

export type WithdrawalExceptionEventFilter =
  TypedEventFilter<WithdrawalExceptionEvent>;

export interface WithdrawnEventObject {
  epoch: BigNumber;
  account: string;
  tokens: Erdstall.TokenValueStructOutput[];
}
export type WithdrawnEvent = TypedEvent<
  [BigNumber, string, Erdstall.TokenValueStructOutput[]],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface Erdstall extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ErdstallInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bigBangTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    chainID(overrides?: CallOverrides): Promise<[number]>;

    challenge(
      balance: Erdstall.BalanceStruct,
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    challengeDeposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    challenges(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    deployBlockNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      depositor: PromiseOrValue<string>,
      assetType: PromiseOrValue<BigNumberish>,
      origin: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [Erdstall.AssetStructOutput] & { asset: Erdstall.AssetStructOutput }
    >;

    encodeBalanceProof(
      balance: Erdstall.BalanceStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ensureFrozen(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    epochDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    frozenEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    holderTypes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    numChallenges(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerTokenType(
      holder: PromiseOrValue<string>,
      localTokenType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    respondChallenge(
      balance: Erdstall.BalanceStruct,
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tee(overrides?: CallOverrides): Promise<[string]>;

    tokenHolders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyBalance(
      balance: Erdstall.BalanceStruct,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    withdraw(
      balance: Erdstall.BalanceStruct,
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFrozen(
      balance: Erdstall.BalanceStruct,
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFrozenDeposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawn(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  bigBangTime(overrides?: CallOverrides): Promise<BigNumber>;

  chainID(overrides?: CallOverrides): Promise<number>;

  challenge(
    balance: Erdstall.BalanceStruct,
    sig: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  challengeDeposit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  challenges(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deployBlockNum(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    depositor: PromiseOrValue<string>,
    assetType: PromiseOrValue<BigNumberish>,
    origin: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<BytesLike>,
    value: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposits(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Erdstall.AssetStructOutput>;

  encodeBalanceProof(
    balance: Erdstall.BalanceStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  ensureFrozen(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

  frozenEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  holderTypes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  numChallenges(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerTokenType(
    holder: PromiseOrValue<string>,
    localTokenType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  respondChallenge(
    balance: Erdstall.BalanceStruct,
    sig: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tee(overrides?: CallOverrides): Promise<string>;

  tokenHolders(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyBalance(
    balance: Erdstall.BalanceStruct,
    sig: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<void>;

  withdraw(
    balance: Erdstall.BalanceStruct,
    sig: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFrozen(
    balance: Erdstall.BalanceStruct,
    sig: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFrozenDeposit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawn(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    bigBangTime(overrides?: CallOverrides): Promise<BigNumber>;

    chainID(overrides?: CallOverrides): Promise<number>;

    challenge(
      balance: Erdstall.BalanceStruct,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    challengeDeposit(overrides?: CallOverrides): Promise<void>;

    challenges(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deployBlockNum(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      depositor: PromiseOrValue<string>,
      assetType: PromiseOrValue<BigNumberish>,
      origin: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Erdstall.AssetStructOutput>;

    encodeBalanceProof(
      balance: Erdstall.BalanceStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    ensureFrozen(overrides?: CallOverrides): Promise<void>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    frozenEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    holderTypes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    numChallenges(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerTokenType(
      holder: PromiseOrValue<string>,
      localTokenType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    respondChallenge(
      balance: Erdstall.BalanceStruct,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    tee(overrides?: CallOverrides): Promise<string>;

    tokenHolders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyBalance(
      balance: Erdstall.BalanceStruct,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      balance: Erdstall.BalanceStruct,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFrozen(
      balance: Erdstall.BalanceStruct,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFrozenDeposit(overrides?: CallOverrides): Promise<void>;

    withdrawn(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ChallengeResponded(uint64,address,tuple[],bytes)"(
      epoch?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      tokens?: null,
      sig?: null
    ): ChallengeRespondedEventFilter;
    ChallengeResponded(
      epoch?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      tokens?: null,
      sig?: null
    ): ChallengeRespondedEventFilter;

    "Challenged(uint64,address)"(
      epoch?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null
    ): ChallengedEventFilter;
    Challenged(
      epoch?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null
    ): ChallengedEventFilter;

    "Deposited(uint64,address,tuple)"(
      epoch?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      value?: null
    ): DepositedEventFilter;
    Deposited(
      epoch?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      value?: null
    ): DepositedEventFilter;

    "Frozen(uint64)"(
      epoch?: PromiseOrValue<BigNumberish> | null
    ): FrozenEventFilter;
    Frozen(epoch?: PromiseOrValue<BigNumberish> | null): FrozenEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "TokenTypeRegistered(uint8,address)"(
      assetType?: null,
      tokenHolder?: null
    ): TokenTypeRegisteredEventFilter;
    TokenTypeRegistered(
      assetType?: null,
      tokenHolder?: null
    ): TokenTypeRegisteredEventFilter;

    "WithdrawalException(uint64,address,tuple,bytes)"(
      epoch?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      token?: Erdstall.TokenValueStruct | null,
      error?: null
    ): WithdrawalExceptionEventFilter;
    WithdrawalException(
      epoch?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      token?: Erdstall.TokenValueStruct | null,
      error?: null
    ): WithdrawalExceptionEventFilter;

    "Withdrawn(uint64,address,tuple[])"(
      epoch?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      tokens?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      epoch?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      tokens?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    bigBangTime(overrides?: CallOverrides): Promise<BigNumber>;

    chainID(overrides?: CallOverrides): Promise<BigNumber>;

    challenge(
      balance: Erdstall.BalanceStruct,
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    challengeDeposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    challenges(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployBlockNum(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      depositor: PromiseOrValue<string>,
      assetType: PromiseOrValue<BigNumberish>,
      origin: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeBalanceProof(
      balance: Erdstall.BalanceStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ensureFrozen(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    frozenEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    holderTypes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numChallenges(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerTokenType(
      holder: PromiseOrValue<string>,
      localTokenType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    respondChallenge(
      balance: Erdstall.BalanceStruct,
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tee(overrides?: CallOverrides): Promise<BigNumber>;

    tokenHolders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyBalance(
      balance: Erdstall.BalanceStruct,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      balance: Erdstall.BalanceStruct,
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFrozen(
      balance: Erdstall.BalanceStruct,
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFrozenDeposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawn(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bigBangTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    challenge(
      balance: Erdstall.BalanceStruct,
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    challengeDeposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    challenges(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployBlockNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      depositor: PromiseOrValue<string>,
      assetType: PromiseOrValue<BigNumberish>,
      origin: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeBalanceProof(
      balance: Erdstall.BalanceStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ensureFrozen(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    epochDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    frozenEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    holderTypes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numChallenges(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerTokenType(
      holder: PromiseOrValue<string>,
      localTokenType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    respondChallenge(
      balance: Erdstall.BalanceStruct,
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenHolders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyBalance(
      balance: Erdstall.BalanceStruct,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      balance: Erdstall.BalanceStruct,
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFrozen(
      balance: Erdstall.BalanceStruct,
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFrozenDeposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawn(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
