/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Erdstall {
  export type AssetStruct = {
    origin: BigNumberish;
    assetType: BigNumberish;
    localID: BytesLike;
  };

  export type AssetStructOutput = [
    origin: bigint,
    assetType: bigint,
    localID: string
  ] & { origin: bigint; assetType: bigint; localID: string };

  export type TokenValueStruct = {
    asset: Erdstall.AssetStruct;
    value: BigNumberish[];
  };

  export type TokenValueStructOutput = [
    asset: Erdstall.AssetStructOutput,
    value: bigint[]
  ] & { asset: Erdstall.AssetStructOutput; value: bigint[] };

  export type BalanceChunkStruct = {
    epoch: BigNumberish;
    id: BigNumberish;
    count: BigNumberish;
    chain: BigNumberish;
    account: AddressLike;
    exit: boolean;
    tokens: Erdstall.TokenValueStruct[];
  };

  export type BalanceChunkStructOutput = [
    epoch: bigint,
    id: bigint,
    count: bigint,
    chain: bigint,
    account: string,
    exit: boolean,
    tokens: Erdstall.TokenValueStructOutput[]
  ] & {
    epoch: bigint;
    id: bigint;
    count: bigint;
    chain: bigint;
    account: string;
    exit: boolean;
    tokens: Erdstall.TokenValueStructOutput[];
  };

  export type ZeroBalanceProofStruct = {
    epoch: BigNumberish;
    chain: BigNumberish;
    account: AddressLike;
  };

  export type ZeroBalanceProofStructOutput = [
    epoch: bigint,
    chain: bigint,
    account: string
  ] & { epoch: bigint; chain: bigint; account: string };

  export type FreezeProofStruct = {
    chain: BigNumberish;
    block: BigNumberish;
    epoch: BigNumberish;
  };

  export type FreezeProofStructOutput = [
    chain: bigint,
    block: bigint,
    epoch: bigint
  ] & { chain: bigint; block: bigint; epoch: bigint };
}

export interface ErdstallInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "abort"
      | "announceTEELifetime"
      | "chainID"
      | "challenge"
      | "challengesLen"
      | "challengesStart"
      | "currentEnclave"
      | "currentEpoch"
      | "deployBlockNum"
      | "deposit"
      | "deposits"
      | "encodeBalanceProof"
      | "epochDuration"
      | "hasPendingFreeze"
      | "holderTypes"
      | "lastOldEnclaveEpoch"
      | "metadataWasHandled"
      | "oldEnclaves"
      | "owner"
      | "recover"
      | "recoveringEnclave"
      | "recoveringEndEpoch"
      | "register"
      | "registerDuration"
      | "registerTokenType"
      | "registeredEnclave"
      | "registeredEndTime"
      | "renounceOwnership"
      | "respondChallenge"
      | "respondZero"
      | "startTime"
      | "state"
      | "submitFreezeProof"
      | "switchEnclave"
      | "tokenHolders"
      | "transferOwnership"
      | "update"
      | "verifyBalance"
      | "verifyLightClientCert"
      | "verifyTeeSig"
      | "verifyZeroBalanceProof"
      | "withdraw"
      | "withdrawFrozenDeposit"
      | "withdrawn"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChallengeResponded"
      | "Challenged"
      | "Deposited"
      | "FirstTimeFungible"
      | "FirstTimeNFT"
      | "Frozen"
      | "OwnershipTransferred"
      | "StateChange"
      | "TEELifetime"
      | "TokenTypeRegistered"
      | "WithdrawalException"
      | "Withdrawn"
      | "ZeroResponded"
  ): EventFragment;

  encodeFunctionData(functionFragment: "abort", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "announceTEELifetime",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "chainID", values?: undefined): string;
  encodeFunctionData(functionFragment: "challenge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "challengesLen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "challengesStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEnclave",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployBlockNum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeBalanceProof",
    values: [Erdstall.BalanceChunkStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "epochDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasPendingFreeze",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "holderTypes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastOldEnclaveEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "metadataWasHandled",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "oldEnclaves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "recover", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoveringEnclave",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoveringEndEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerTokenType",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredEnclave",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registeredEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "respondChallenge",
    values: [Erdstall.BalanceChunkStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "respondZero",
    values: [Erdstall.ZeroBalanceProofStruct, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitFreezeProof",
    values: [Erdstall.FreezeProofStruct, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "switchEnclave",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenHolders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "update", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyBalance",
    values: [Erdstall.BalanceChunkStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyLightClientCert",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyTeeSig",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyZeroBalanceProof",
    values: [Erdstall.ZeroBalanceProofStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [Erdstall.BalanceChunkStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFrozenDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawn",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "abort", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "announceTEELifetime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "challenge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "challengesLen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengesStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEnclave",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployBlockNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "encodeBalanceProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPendingFreeze",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "holderTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastOldEnclaveEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataWasHandled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oldEnclaves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recover", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoveringEnclave",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoveringEndEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTokenType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredEnclave",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "respondChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "respondZero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitFreezeProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchEnclave",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyLightClientCert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyTeeSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyZeroBalanceProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFrozenDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawn", data: BytesLike): Result;
}

export namespace ChallengeRespondedEvent {
  export type InputTuple = [
    epoch: BigNumberish,
    account: AddressLike,
    id: BigNumberish,
    count: BigNumberish,
    tokens: Erdstall.TokenValueStruct[],
    exit: boolean,
    sig: BytesLike
  ];
  export type OutputTuple = [
    epoch: bigint,
    account: string,
    id: bigint,
    count: bigint,
    tokens: Erdstall.TokenValueStructOutput[],
    exit: boolean,
    sig: string
  ];
  export interface OutputObject {
    epoch: bigint;
    account: string;
    id: bigint;
    count: bigint;
    tokens: Erdstall.TokenValueStructOutput[];
    exit: boolean;
    sig: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChallengedEvent {
  export type InputTuple = [epoch: BigNumberish, account: AddressLike];
  export type OutputTuple = [epoch: bigint, account: string];
  export interface OutputObject {
    epoch: bigint;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    epoch: BigNumberish,
    account: AddressLike,
    value: Erdstall.TokenValueStruct
  ];
  export type OutputTuple = [
    epoch: bigint,
    account: string,
    value: Erdstall.TokenValueStructOutput
  ];
  export interface OutputObject {
    epoch: bigint;
    account: string;
    value: Erdstall.TokenValueStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FirstTimeFungibleEvent {
  export type InputTuple = [
    localID: BytesLike,
    name: string,
    symbol: string,
    decimals: BigNumberish
  ];
  export type OutputTuple = [
    localID: string,
    name: string,
    symbol: string,
    decimals: bigint
  ];
  export interface OutputObject {
    localID: string;
    name: string;
    symbol: string;
    decimals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FirstTimeNFTEvent {
  export type InputTuple = [
    localID: BytesLike,
    name: string,
    symbol: string,
    sampleURI: string
  ];
  export type OutputTuple = [
    localID: string,
    name: string,
    symbol: string,
    sampleURI: string
  ];
  export interface OutputObject {
    localID: string;
    name: string;
    symbol: string;
    sampleURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FrozenEvent {
  export type InputTuple = [epoch: BigNumberish];
  export type OutputTuple = [epoch: bigint];
  export interface OutputObject {
    epoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StateChangeEvent {
  export type InputTuple = [state: BigNumberish];
  export type OutputTuple = [state: bigint];
  export interface OutputObject {
    state: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TEELifetimeEvent {
  export type InputTuple = [
    lifetime_uid: BytesLike,
    epoch_to_restore_from: BigNumberish
  ];
  export type OutputTuple = [
    lifetime_uid: string,
    epoch_to_restore_from: bigint
  ];
  export interface OutputObject {
    lifetime_uid: string;
    epoch_to_restore_from: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenTypeRegisteredEvent {
  export type InputTuple = [assetType: BigNumberish, tokenHolder: AddressLike];
  export type OutputTuple = [assetType: bigint, tokenHolder: string];
  export interface OutputObject {
    assetType: bigint;
    tokenHolder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalExceptionEvent {
  export type InputTuple = [
    epoch: BigNumberish,
    account: AddressLike,
    token: Erdstall.TokenValueStruct,
    error: BytesLike
  ];
  export type OutputTuple = [
    epoch: bigint,
    account: string,
    token: Erdstall.TokenValueStructOutput,
    error: string
  ];
  export interface OutputObject {
    epoch: bigint;
    account: string;
    token: Erdstall.TokenValueStructOutput;
    error: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    epoch: BigNumberish,
    account: AddressLike,
    tokens: Erdstall.TokenValueStruct[]
  ];
  export type OutputTuple = [
    epoch: bigint,
    account: string,
    tokens: Erdstall.TokenValueStructOutput[]
  ];
  export interface OutputObject {
    epoch: bigint;
    account: string;
    tokens: Erdstall.TokenValueStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ZeroRespondedEvent {
  export type InputTuple = [epoch: BigNumberish, account: AddressLike];
  export type OutputTuple = [epoch: bigint, account: string];
  export interface OutputObject {
    epoch: bigint;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Erdstall extends BaseContract {
  connect(runner?: ContractRunner | null): Erdstall;
  waitForDeployment(): Promise<this>;

  interface: ErdstallInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  abort: TypedContractMethod<[], [void], "nonpayable">;

  announceTEELifetime: TypedContractMethod<
    [lifetime_uid: BytesLike],
    [void],
    "nonpayable"
  >;

  chainID: TypedContractMethod<[], [bigint], "view">;

  challenge: TypedContractMethod<[], [void], "nonpayable">;

  challengesLen: TypedContractMethod<[], [bigint], "view">;

  challengesStart: TypedContractMethod<[], [bigint], "view">;

  currentEnclave: TypedContractMethod<[], [string], "view">;

  currentEpoch: TypedContractMethod<[], [bigint], "view">;

  deployBlockNum: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<
    [
      depositor: AddressLike,
      assetType: BigNumberish,
      origin: BigNumberish,
      token: BytesLike,
      value: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  deposits: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike, arg2: BigNumberish],
    [Erdstall.AssetStructOutput],
    "view"
  >;

  encodeBalanceProof: TypedContractMethod<
    [balance: Erdstall.BalanceChunkStruct],
    [string],
    "view"
  >;

  epochDuration: TypedContractMethod<[], [bigint], "view">;

  hasPendingFreeze: TypedContractMethod<[], [boolean], "view">;

  holderTypes: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  lastOldEnclaveEpoch: TypedContractMethod<[], [bigint], "view">;

  metadataWasHandled: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  oldEnclaves: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, string] & { last_epoch: bigint; enclave: string }],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  recover: TypedContractMethod<[], [void], "nonpayable">;

  recoveringEnclave: TypedContractMethod<[], [string], "view">;

  recoveringEndEpoch: TypedContractMethod<[], [bigint], "view">;

  register: TypedContractMethod<[enclave: AddressLike], [void], "nonpayable">;

  registerDuration: TypedContractMethod<[], [bigint], "view">;

  registerTokenType: TypedContractMethod<
    [holder: AddressLike, localTokenType: BigNumberish],
    [void],
    "nonpayable"
  >;

  registeredEnclave: TypedContractMethod<[], [string], "view">;

  registeredEndTime: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  respondChallenge: TypedContractMethod<
    [balance: Erdstall.BalanceChunkStruct, sig: BytesLike],
    [void],
    "nonpayable"
  >;

  respondZero: TypedContractMethod<
    [proof: Erdstall.ZeroBalanceProofStruct, sig: BytesLike],
    [void],
    "nonpayable"
  >;

  startTime: TypedContractMethod<[], [bigint], "view">;

  state: TypedContractMethod<[], [bigint], "view">;

  submitFreezeProof: TypedContractMethod<
    [proof: Erdstall.FreezeProofStruct, sig: BytesLike, certificate: BytesLike],
    [void],
    "nonpayable"
  >;

  switchEnclave: TypedContractMethod<[], [void], "nonpayable">;

  tokenHolders: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  update: TypedContractMethod<[], [void], "nonpayable">;

  verifyBalance: TypedContractMethod<
    [balance: Erdstall.BalanceChunkStruct, sig: BytesLike],
    [void],
    "view"
  >;

  verifyLightClientCert: TypedContractMethod<
    [lightClient: AddressLike, certificate: BytesLike],
    [void],
    "view"
  >;

  verifyTeeSig: TypedContractMethod<
    [abiCode: BytesLike, sig: BytesLike, epoch: BigNumberish],
    [boolean],
    "view"
  >;

  verifyZeroBalanceProof: TypedContractMethod<
    [proof: Erdstall.ZeroBalanceProofStruct, sig: BytesLike],
    [void],
    "view"
  >;

  withdraw: TypedContractMethod<
    [balance: Erdstall.BalanceChunkStruct, sig: BytesLike],
    [void],
    "nonpayable"
  >;

  withdrawFrozenDeposit: TypedContractMethod<[], [void], "nonpayable">;

  withdrawn: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "abort"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "announceTEELifetime"
  ): TypedContractMethod<[lifetime_uid: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "chainID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "challenge"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "challengesLen"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "challengesStart"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentEnclave"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "currentEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deployBlockNum"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      depositor: AddressLike,
      assetType: BigNumberish,
      origin: BigNumberish,
      token: BytesLike,
      value: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposits"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike, arg2: BigNumberish],
    [Erdstall.AssetStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "encodeBalanceProof"
  ): TypedContractMethod<
    [balance: Erdstall.BalanceChunkStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "epochDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasPendingFreeze"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "holderTypes"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastOldEnclaveEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "metadataWasHandled"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "oldEnclaves"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, string] & { last_epoch: bigint; enclave: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recover"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "recoveringEnclave"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recoveringEndEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<[enclave: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerTokenType"
  ): TypedContractMethod<
    [holder: AddressLike, localTokenType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registeredEnclave"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registeredEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "respondChallenge"
  ): TypedContractMethod<
    [balance: Erdstall.BalanceChunkStruct, sig: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "respondZero"
  ): TypedContractMethod<
    [proof: Erdstall.ZeroBalanceProofStruct, sig: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "submitFreezeProof"
  ): TypedContractMethod<
    [proof: Erdstall.FreezeProofStruct, sig: BytesLike, certificate: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "switchEnclave"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenHolders"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "update"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyBalance"
  ): TypedContractMethod<
    [balance: Erdstall.BalanceChunkStruct, sig: BytesLike],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyLightClientCert"
  ): TypedContractMethod<
    [lightClient: AddressLike, certificate: BytesLike],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyTeeSig"
  ): TypedContractMethod<
    [abiCode: BytesLike, sig: BytesLike, epoch: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyZeroBalanceProof"
  ): TypedContractMethod<
    [proof: Erdstall.ZeroBalanceProofStruct, sig: BytesLike],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [balance: Erdstall.BalanceChunkStruct, sig: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFrozenDeposit"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawn"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "ChallengeResponded"
  ): TypedContractEvent<
    ChallengeRespondedEvent.InputTuple,
    ChallengeRespondedEvent.OutputTuple,
    ChallengeRespondedEvent.OutputObject
  >;
  getEvent(
    key: "Challenged"
  ): TypedContractEvent<
    ChallengedEvent.InputTuple,
    ChallengedEvent.OutputTuple,
    ChallengedEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "FirstTimeFungible"
  ): TypedContractEvent<
    FirstTimeFungibleEvent.InputTuple,
    FirstTimeFungibleEvent.OutputTuple,
    FirstTimeFungibleEvent.OutputObject
  >;
  getEvent(
    key: "FirstTimeNFT"
  ): TypedContractEvent<
    FirstTimeNFTEvent.InputTuple,
    FirstTimeNFTEvent.OutputTuple,
    FirstTimeNFTEvent.OutputObject
  >;
  getEvent(
    key: "Frozen"
  ): TypedContractEvent<
    FrozenEvent.InputTuple,
    FrozenEvent.OutputTuple,
    FrozenEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "StateChange"
  ): TypedContractEvent<
    StateChangeEvent.InputTuple,
    StateChangeEvent.OutputTuple,
    StateChangeEvent.OutputObject
  >;
  getEvent(
    key: "TEELifetime"
  ): TypedContractEvent<
    TEELifetimeEvent.InputTuple,
    TEELifetimeEvent.OutputTuple,
    TEELifetimeEvent.OutputObject
  >;
  getEvent(
    key: "TokenTypeRegistered"
  ): TypedContractEvent<
    TokenTypeRegisteredEvent.InputTuple,
    TokenTypeRegisteredEvent.OutputTuple,
    TokenTypeRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalException"
  ): TypedContractEvent<
    WithdrawalExceptionEvent.InputTuple,
    WithdrawalExceptionEvent.OutputTuple,
    WithdrawalExceptionEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "ZeroResponded"
  ): TypedContractEvent<
    ZeroRespondedEvent.InputTuple,
    ZeroRespondedEvent.OutputTuple,
    ZeroRespondedEvent.OutputObject
  >;

  filters: {
    "ChallengeResponded(uint64,address,uint32,uint32,tuple[],bool,bytes)": TypedContractEvent<
      ChallengeRespondedEvent.InputTuple,
      ChallengeRespondedEvent.OutputTuple,
      ChallengeRespondedEvent.OutputObject
    >;
    ChallengeResponded: TypedContractEvent<
      ChallengeRespondedEvent.InputTuple,
      ChallengeRespondedEvent.OutputTuple,
      ChallengeRespondedEvent.OutputObject
    >;

    "Challenged(uint64,address)": TypedContractEvent<
      ChallengedEvent.InputTuple,
      ChallengedEvent.OutputTuple,
      ChallengedEvent.OutputObject
    >;
    Challenged: TypedContractEvent<
      ChallengedEvent.InputTuple,
      ChallengedEvent.OutputTuple,
      ChallengedEvent.OutputObject
    >;

    "Deposited(uint64,address,tuple)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "FirstTimeFungible(bytes32,string,string,uint8)": TypedContractEvent<
      FirstTimeFungibleEvent.InputTuple,
      FirstTimeFungibleEvent.OutputTuple,
      FirstTimeFungibleEvent.OutputObject
    >;
    FirstTimeFungible: TypedContractEvent<
      FirstTimeFungibleEvent.InputTuple,
      FirstTimeFungibleEvent.OutputTuple,
      FirstTimeFungibleEvent.OutputObject
    >;

    "FirstTimeNFT(bytes32,string,string,string)": TypedContractEvent<
      FirstTimeNFTEvent.InputTuple,
      FirstTimeNFTEvent.OutputTuple,
      FirstTimeNFTEvent.OutputObject
    >;
    FirstTimeNFT: TypedContractEvent<
      FirstTimeNFTEvent.InputTuple,
      FirstTimeNFTEvent.OutputTuple,
      FirstTimeNFTEvent.OutputObject
    >;

    "Frozen(uint64)": TypedContractEvent<
      FrozenEvent.InputTuple,
      FrozenEvent.OutputTuple,
      FrozenEvent.OutputObject
    >;
    Frozen: TypedContractEvent<
      FrozenEvent.InputTuple,
      FrozenEvent.OutputTuple,
      FrozenEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "StateChange(uint8)": TypedContractEvent<
      StateChangeEvent.InputTuple,
      StateChangeEvent.OutputTuple,
      StateChangeEvent.OutputObject
    >;
    StateChange: TypedContractEvent<
      StateChangeEvent.InputTuple,
      StateChangeEvent.OutputTuple,
      StateChangeEvent.OutputObject
    >;

    "TEELifetime(bytes32,uint64)": TypedContractEvent<
      TEELifetimeEvent.InputTuple,
      TEELifetimeEvent.OutputTuple,
      TEELifetimeEvent.OutputObject
    >;
    TEELifetime: TypedContractEvent<
      TEELifetimeEvent.InputTuple,
      TEELifetimeEvent.OutputTuple,
      TEELifetimeEvent.OutputObject
    >;

    "TokenTypeRegistered(uint8,address)": TypedContractEvent<
      TokenTypeRegisteredEvent.InputTuple,
      TokenTypeRegisteredEvent.OutputTuple,
      TokenTypeRegisteredEvent.OutputObject
    >;
    TokenTypeRegistered: TypedContractEvent<
      TokenTypeRegisteredEvent.InputTuple,
      TokenTypeRegisteredEvent.OutputTuple,
      TokenTypeRegisteredEvent.OutputObject
    >;

    "WithdrawalException(uint64,address,tuple,bytes)": TypedContractEvent<
      WithdrawalExceptionEvent.InputTuple,
      WithdrawalExceptionEvent.OutputTuple,
      WithdrawalExceptionEvent.OutputObject
    >;
    WithdrawalException: TypedContractEvent<
      WithdrawalExceptionEvent.InputTuple,
      WithdrawalExceptionEvent.OutputTuple,
      WithdrawalExceptionEvent.OutputObject
    >;

    "Withdrawn(uint64,address,tuple[])": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;

    "ZeroResponded(uint64,address)": TypedContractEvent<
      ZeroRespondedEvent.InputTuple,
      ZeroRespondedEvent.OutputTuple,
      ZeroRespondedEvent.OutputObject
    >;
    ZeroResponded: TypedContractEvent<
      ZeroRespondedEvent.InputTuple,
      ZeroRespondedEvent.OutputTuple,
      ZeroRespondedEvent.OutputObject
    >;
  };
}
