/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ErdstallFakeEventEmitter {
  export type AssetStruct = {
    origin: BigNumberish;
    assetType: BigNumberish;
    localID: BytesLike;
  };

  export type AssetStructOutput = [
    origin: bigint,
    assetType: bigint,
    localID: string
  ] & { origin: bigint; assetType: bigint; localID: string };

  export type TokenValueStruct = {
    asset: ErdstallFakeEventEmitter.AssetStruct;
    value: BigNumberish[];
  };

  export type TokenValueStructOutput = [
    asset: ErdstallFakeEventEmitter.AssetStructOutput,
    value: bigint[]
  ] & { asset: ErdstallFakeEventEmitter.AssetStructOutput; value: bigint[] };
}

export interface ErdstallFakeEventEmitterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "fake_challenge_responded_0"
      | "fake_challenge_responded_1"
      | "fake_challenge_responded_2"
      | "fake_challenged"
      | "fake_deposited"
      | "fake_frozen"
      | "fake_multi_challenged"
      | "fake_multi_mixed"
      | "fake_zero_responded"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChallengeResponded"
      | "Challenged"
      | "Deposited"
      | "FirstTimeFungible"
      | "FirstTimeNFT"
      | "Frozen"
      | "TokenTypeRegistered"
      | "WithdrawalException"
      | "Withdrawn"
      | "ZeroResponded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "fake_challenge_responded_0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fake_challenge_responded_1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fake_challenge_responded_2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fake_challenged",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fake_deposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fake_frozen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fake_multi_challenged",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fake_multi_mixed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fake_zero_responded",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "fake_challenge_responded_0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fake_challenge_responded_1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fake_challenge_responded_2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fake_challenged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fake_deposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fake_frozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fake_multi_challenged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fake_multi_mixed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fake_zero_responded",
    data: BytesLike
  ): Result;
}

export namespace ChallengeRespondedEvent {
  export type InputTuple = [
    epoch: BigNumberish,
    account: AddressLike,
    id: BigNumberish,
    count: BigNumberish,
    tokens: ErdstallFakeEventEmitter.TokenValueStruct[],
    exit: boolean,
    sig: BytesLike
  ];
  export type OutputTuple = [
    epoch: bigint,
    account: string,
    id: bigint,
    count: bigint,
    tokens: ErdstallFakeEventEmitter.TokenValueStructOutput[],
    exit: boolean,
    sig: string
  ];
  export interface OutputObject {
    epoch: bigint;
    account: string;
    id: bigint;
    count: bigint;
    tokens: ErdstallFakeEventEmitter.TokenValueStructOutput[];
    exit: boolean;
    sig: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChallengedEvent {
  export type InputTuple = [epoch: BigNumberish, account: AddressLike];
  export type OutputTuple = [epoch: bigint, account: string];
  export interface OutputObject {
    epoch: bigint;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    epoch: BigNumberish,
    account: AddressLike,
    value: ErdstallFakeEventEmitter.TokenValueStruct
  ];
  export type OutputTuple = [
    epoch: bigint,
    account: string,
    value: ErdstallFakeEventEmitter.TokenValueStructOutput
  ];
  export interface OutputObject {
    epoch: bigint;
    account: string;
    value: ErdstallFakeEventEmitter.TokenValueStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FirstTimeFungibleEvent {
  export type InputTuple = [
    localID: BytesLike,
    name: string,
    symbol: string,
    decimals: BigNumberish
  ];
  export type OutputTuple = [
    localID: string,
    name: string,
    symbol: string,
    decimals: bigint
  ];
  export interface OutputObject {
    localID: string;
    name: string;
    symbol: string;
    decimals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FirstTimeNFTEvent {
  export type InputTuple = [
    localID: BytesLike,
    name: string,
    symbol: string,
    sampleURI: string
  ];
  export type OutputTuple = [
    localID: string,
    name: string,
    symbol: string,
    sampleURI: string
  ];
  export interface OutputObject {
    localID: string;
    name: string;
    symbol: string;
    sampleURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FrozenEvent {
  export type InputTuple = [epoch: BigNumberish];
  export type OutputTuple = [epoch: bigint];
  export interface OutputObject {
    epoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenTypeRegisteredEvent {
  export type InputTuple = [assetType: BigNumberish, tokenHolder: AddressLike];
  export type OutputTuple = [assetType: bigint, tokenHolder: string];
  export interface OutputObject {
    assetType: bigint;
    tokenHolder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalExceptionEvent {
  export type InputTuple = [
    epoch: BigNumberish,
    account: AddressLike,
    token: ErdstallFakeEventEmitter.TokenValueStruct,
    error: BytesLike
  ];
  export type OutputTuple = [
    epoch: bigint,
    account: string,
    token: ErdstallFakeEventEmitter.TokenValueStructOutput,
    error: string
  ];
  export interface OutputObject {
    epoch: bigint;
    account: string;
    token: ErdstallFakeEventEmitter.TokenValueStructOutput;
    error: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    epoch: BigNumberish,
    account: AddressLike,
    tokens: ErdstallFakeEventEmitter.TokenValueStruct[]
  ];
  export type OutputTuple = [
    epoch: bigint,
    account: string,
    tokens: ErdstallFakeEventEmitter.TokenValueStructOutput[]
  ];
  export interface OutputObject {
    epoch: bigint;
    account: string;
    tokens: ErdstallFakeEventEmitter.TokenValueStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ZeroRespondedEvent {
  export type InputTuple = [epoch: BigNumberish, account: AddressLike];
  export type OutputTuple = [epoch: bigint, account: string];
  export interface OutputObject {
    epoch: bigint;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ErdstallFakeEventEmitter extends BaseContract {
  connect(runner?: ContractRunner | null): ErdstallFakeEventEmitter;
  waitForDeployment(): Promise<this>;

  interface: ErdstallFakeEventEmitterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  fake_challenge_responded_0: TypedContractMethod<[], [void], "nonpayable">;

  fake_challenge_responded_1: TypedContractMethod<[], [void], "nonpayable">;

  fake_challenge_responded_2: TypedContractMethod<[], [void], "nonpayable">;

  fake_challenged: TypedContractMethod<[], [void], "nonpayable">;

  fake_deposited: TypedContractMethod<[], [void], "nonpayable">;

  fake_frozen: TypedContractMethod<[], [void], "nonpayable">;

  fake_multi_challenged: TypedContractMethod<[], [void], "nonpayable">;

  fake_multi_mixed: TypedContractMethod<[], [void], "nonpayable">;

  fake_zero_responded: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "fake_challenge_responded_0"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fake_challenge_responded_1"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fake_challenge_responded_2"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fake_challenged"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fake_deposited"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fake_frozen"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fake_multi_challenged"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fake_multi_mixed"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fake_zero_responded"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ChallengeResponded"
  ): TypedContractEvent<
    ChallengeRespondedEvent.InputTuple,
    ChallengeRespondedEvent.OutputTuple,
    ChallengeRespondedEvent.OutputObject
  >;
  getEvent(
    key: "Challenged"
  ): TypedContractEvent<
    ChallengedEvent.InputTuple,
    ChallengedEvent.OutputTuple,
    ChallengedEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "FirstTimeFungible"
  ): TypedContractEvent<
    FirstTimeFungibleEvent.InputTuple,
    FirstTimeFungibleEvent.OutputTuple,
    FirstTimeFungibleEvent.OutputObject
  >;
  getEvent(
    key: "FirstTimeNFT"
  ): TypedContractEvent<
    FirstTimeNFTEvent.InputTuple,
    FirstTimeNFTEvent.OutputTuple,
    FirstTimeNFTEvent.OutputObject
  >;
  getEvent(
    key: "Frozen"
  ): TypedContractEvent<
    FrozenEvent.InputTuple,
    FrozenEvent.OutputTuple,
    FrozenEvent.OutputObject
  >;
  getEvent(
    key: "TokenTypeRegistered"
  ): TypedContractEvent<
    TokenTypeRegisteredEvent.InputTuple,
    TokenTypeRegisteredEvent.OutputTuple,
    TokenTypeRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalException"
  ): TypedContractEvent<
    WithdrawalExceptionEvent.InputTuple,
    WithdrawalExceptionEvent.OutputTuple,
    WithdrawalExceptionEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "ZeroResponded"
  ): TypedContractEvent<
    ZeroRespondedEvent.InputTuple,
    ZeroRespondedEvent.OutputTuple,
    ZeroRespondedEvent.OutputObject
  >;

  filters: {
    "ChallengeResponded(uint64,address,uint32,uint32,tuple[],bool,bytes)": TypedContractEvent<
      ChallengeRespondedEvent.InputTuple,
      ChallengeRespondedEvent.OutputTuple,
      ChallengeRespondedEvent.OutputObject
    >;
    ChallengeResponded: TypedContractEvent<
      ChallengeRespondedEvent.InputTuple,
      ChallengeRespondedEvent.OutputTuple,
      ChallengeRespondedEvent.OutputObject
    >;

    "Challenged(uint64,address)": TypedContractEvent<
      ChallengedEvent.InputTuple,
      ChallengedEvent.OutputTuple,
      ChallengedEvent.OutputObject
    >;
    Challenged: TypedContractEvent<
      ChallengedEvent.InputTuple,
      ChallengedEvent.OutputTuple,
      ChallengedEvent.OutputObject
    >;

    "Deposited(uint64,address,tuple)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "FirstTimeFungible(bytes32,string,string,uint8)": TypedContractEvent<
      FirstTimeFungibleEvent.InputTuple,
      FirstTimeFungibleEvent.OutputTuple,
      FirstTimeFungibleEvent.OutputObject
    >;
    FirstTimeFungible: TypedContractEvent<
      FirstTimeFungibleEvent.InputTuple,
      FirstTimeFungibleEvent.OutputTuple,
      FirstTimeFungibleEvent.OutputObject
    >;

    "FirstTimeNFT(bytes32,string,string,string)": TypedContractEvent<
      FirstTimeNFTEvent.InputTuple,
      FirstTimeNFTEvent.OutputTuple,
      FirstTimeNFTEvent.OutputObject
    >;
    FirstTimeNFT: TypedContractEvent<
      FirstTimeNFTEvent.InputTuple,
      FirstTimeNFTEvent.OutputTuple,
      FirstTimeNFTEvent.OutputObject
    >;

    "Frozen(uint64)": TypedContractEvent<
      FrozenEvent.InputTuple,
      FrozenEvent.OutputTuple,
      FrozenEvent.OutputObject
    >;
    Frozen: TypedContractEvent<
      FrozenEvent.InputTuple,
      FrozenEvent.OutputTuple,
      FrozenEvent.OutputObject
    >;

    "TokenTypeRegistered(uint8,address)": TypedContractEvent<
      TokenTypeRegisteredEvent.InputTuple,
      TokenTypeRegisteredEvent.OutputTuple,
      TokenTypeRegisteredEvent.OutputObject
    >;
    TokenTypeRegistered: TypedContractEvent<
      TokenTypeRegisteredEvent.InputTuple,
      TokenTypeRegisteredEvent.OutputTuple,
      TokenTypeRegisteredEvent.OutputObject
    >;

    "WithdrawalException(uint64,address,tuple,bytes)": TypedContractEvent<
      WithdrawalExceptionEvent.InputTuple,
      WithdrawalExceptionEvent.OutputTuple,
      WithdrawalExceptionEvent.OutputObject
    >;
    WithdrawalException: TypedContractEvent<
      WithdrawalExceptionEvent.InputTuple,
      WithdrawalExceptionEvent.OutputTuple,
      WithdrawalExceptionEvent.OutputObject
    >;

    "Withdrawn(uint64,address,tuple[])": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;

    "ZeroResponded(uint64,address)": TypedContractEvent<
      ZeroRespondedEvent.InputTuple,
      ZeroRespondedEvent.OutputTuple,
      ZeroRespondedEvent.OutputObject
    >;
    ZeroResponded: TypedContractEvent<
      ZeroRespondedEvent.InputTuple,
      ZeroRespondedEvent.OutputTuple,
      ZeroRespondedEvent.OutputObject
    >;
  };
}
