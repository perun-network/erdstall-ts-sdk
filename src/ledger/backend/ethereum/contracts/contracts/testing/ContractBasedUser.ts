/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ContractBasedUserInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveERC20"
      | "approveERC721"
      | "depositERC20"
      | "depositERC721"
      | "depositEth"
      | "onERC721Received"
      | "reset"
      | "setMode"
      | "setModeWithCountdown"
      | "setRedepositHolderAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveERC20",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveERC721",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC721",
    values: [AddressLike, AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositEth",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "reset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setMode",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setModeWithCountdown",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedepositHolderAddress",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setModeWithCountdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedepositHolderAddress",
    data: BytesLike
  ): Result;
}

export interface ContractBasedUser extends BaseContract {
  connect(runner?: ContractRunner | null): ContractBasedUser;
  waitForDeployment(): Promise<this>;

  interface: ContractBasedUserInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveERC20: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  approveERC721: TypedContractMethod<
    [token: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositERC20: TypedContractMethod<
    [holder: AddressLike, token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositERC721: TypedContractMethod<
    [holder: AddressLike, token: AddressLike, ids: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  depositEth: TypedContractMethod<[holder: AddressLike], [void], "payable">;

  onERC721Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      tokenId: BigNumberish,
      arg3: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  reset: TypedContractMethod<[], [void], "nonpayable">;

  setMode: TypedContractMethod<[mode_: BigNumberish], [void], "nonpayable">;

  setModeWithCountdown: TypedContractMethod<
    [
      before_: BigNumberish,
      countdown_: BigNumberish,
      after_: BigNumberish,
      resetCount_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setRedepositHolderAddress: TypedContractMethod<
    [addr: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveERC20"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveERC721"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositERC20"
  ): TypedContractMethod<
    [holder: AddressLike, token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositERC721"
  ): TypedContractMethod<
    [holder: AddressLike, token: AddressLike, ids: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositEth"
  ): TypedContractMethod<[holder: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      tokenId: BigNumberish,
      arg3: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reset"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMode"
  ): TypedContractMethod<[mode_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setModeWithCountdown"
  ): TypedContractMethod<
    [
      before_: BigNumberish,
      countdown_: BigNumberish,
      after_: BigNumberish,
      resetCount_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRedepositHolderAddress"
  ): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;

  filters: {};
}
