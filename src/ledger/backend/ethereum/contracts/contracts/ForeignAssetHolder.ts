/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ForeignAssetHolderInterface extends utils.Interface {
  functions: {
    "deployedToken(uint16,bytes32)": FunctionFragment;
    "erdstall()": FunctionFragment;
    "foreignAssets(address)": FunctionFragment;
    "transfer(uint16,bytes32,address,uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deployedToken"
      | "erdstall"
      | "foreignAssets"
      | "transfer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deployedToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "erdstall", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "foreignAssets",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erdstall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "foreignAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;

  events: {
    "ForeignAssetContractDeployed(address,uint16,bytes32)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "ForeignAssetContractDeployed"
  ): EventFragment;
}

export interface ForeignAssetContractDeployedEventObject {
  addr: string;
  origin: number;
  localID: string;
}
export type ForeignAssetContractDeployedEvent = TypedEvent<
  [string, number, string],
  ForeignAssetContractDeployedEventObject
>;

export type ForeignAssetContractDeployedEventFilter =
  TypedEventFilter<ForeignAssetContractDeployedEvent>;

export interface ForeignAssetHolder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ForeignAssetHolderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deployedToken(
      origin_: PromiseOrValue<BigNumberish>,
      localID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    erdstall(overrides?: CallOverrides): Promise<[string]>;

    foreignAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { localID: string; origin: number }>;

    transfer(
      origin: PromiseOrValue<BigNumberish>,
      localID: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  deployedToken(
    origin_: PromiseOrValue<BigNumberish>,
    localID: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  erdstall(overrides?: CallOverrides): Promise<string>;

  foreignAssets(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, number] & { localID: string; origin: number }>;

  transfer(
    origin: PromiseOrValue<BigNumberish>,
    localID: PromiseOrValue<BytesLike>,
    recipient: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deployedToken(
      origin_: PromiseOrValue<BigNumberish>,
      localID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    erdstall(overrides?: CallOverrides): Promise<string>;

    foreignAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { localID: string; origin: number }>;

    transfer(
      origin: PromiseOrValue<BigNumberish>,
      localID: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ForeignAssetContractDeployed(address,uint16,bytes32)"(
      addr?: null,
      origin?: null,
      localID?: null
    ): ForeignAssetContractDeployedEventFilter;
    ForeignAssetContractDeployed(
      addr?: null,
      origin?: null,
      localID?: null
    ): ForeignAssetContractDeployedEventFilter;
  };

  estimateGas: {
    deployedToken(
      origin_: PromiseOrValue<BigNumberish>,
      localID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    erdstall(overrides?: CallOverrides): Promise<BigNumber>;

    foreignAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      origin: PromiseOrValue<BigNumberish>,
      localID: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deployedToken(
      origin_: PromiseOrValue<BigNumberish>,
      localID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    erdstall(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    foreignAssets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      origin: PromiseOrValue<BigNumberish>,
      localID: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
