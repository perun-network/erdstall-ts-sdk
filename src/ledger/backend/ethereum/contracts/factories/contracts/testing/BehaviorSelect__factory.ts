/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  BehaviorSelect,
  BehaviorSelectInterface,
} from "../../../contracts/testing/BehaviorSelect";

const _abi = [
  {
    inputs: [],
    name: "reset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum BehaviorSelect.Mode",
        name: "mode_",
        type: "uint8",
      },
    ],
    name: "setMode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum BehaviorSelect.Mode",
        name: "before_",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "countdown_",
        type: "uint256",
      },
      {
        internalType: "enum BehaviorSelect.Mode",
        name: "after_",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "resetCount_",
        type: "uint256",
      },
    ],
    name: "setModeWithCountdown",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506101e58061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806321175b4a1461004657806354ed9e321461005b578063d826f88f1461006e575b600080fd5b61005961005436600461011a565b61007d565b005b61005961006936600461013c565b6100b1565b61005960006001819055600355565b6000600190815560001960035560028054839260ff19909116908360058111156100a9576100a9610180565b021790555050565b6000805485919060ff191660018360058111156100d0576100d0610180565b0217905550600183815560028054849260ff19909116908360058111156100f9576100f9610180565b0217905550600355505050565b80356006811061011557600080fd5b919050565b60006020828403121561012c57600080fd5b61013582610106565b9392505050565b6000806000806080858703121561015257600080fd5b61015b85610106565b93506020850135925061017060408601610106565b9396929550929360600135925050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220e93366b17189d2d27f4589ed71508354c3ba6fddccb7c7aa8253367228ff0be164736f6c634300081b0033";

type BehaviorSelectConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BehaviorSelectConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BehaviorSelect__factory extends ContractFactory {
  constructor(...args: BehaviorSelectConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      BehaviorSelect & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): BehaviorSelect__factory {
    return super.connect(runner) as BehaviorSelect__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BehaviorSelectInterface {
    return new Interface(_abi) as BehaviorSelectInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BehaviorSelect {
    return new Contract(address, _abi, runner) as unknown as BehaviorSelect;
  }
}
