/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ContractBasedUser,
  ContractBasedUserInterface,
} from "../../../contracts/testing/ContractBasedUser";

const _abi = [
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approveERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC721",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approveERC721",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20Holder",
        name: "holder",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "depositERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC721Holder",
        name: "holder",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
    ],
    name: "depositERC721",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ETHHolder",
        name: "holder",
        type: "address",
      },
    ],
    name: "depositEth",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "reset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum BehaviorSelect.Mode",
        name: "mode_",
        type: "uint8",
      },
    ],
    name: "setMode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum BehaviorSelect.Mode",
        name: "before_",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "countdown_",
        type: "uint256",
      },
      {
        internalType: "enum BehaviorSelect.Mode",
        name: "after_",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "resetCount_",
        type: "uint256",
      },
    ],
    name: "setModeWithCountdown",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "setRedepositHolderAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d47806100206000396000f3fe6080604052600436106100b45760003560e01c806354ed9e3211610069578063ad9d4ba31161004e578063ad9d4ba3146102b1578063d826f88f146102c4578063efcc7b38146102e05761016f565b806354ed9e3214610271578063a8e5e4aa146102915761016f565b80631cad5a401161009a5780631cad5a40146102115780631e6c7ee21461023157806321175b4a146102515761016f565b8062a7230a1461019a578063150b7a02146101bc5761016f565b3661016f5760006100c3610342565b905060028160058111156100d9576100d9610c8e565b14156100e457600080fd5b60048160058111156100f8576100f8610c8e565b141561016c5760055473ffffffffffffffffffffffffffffffffffffffff1663d0e30db0610127600234610c15565b6040518263ffffffff1660e01b81526004016000604051808303818588803b15801561015257600080fd5b505af1158015610166573d6000803e3d6000fd5b50505050505b50005b6000610179610342565b9050600281600581111561018f5761018f610c8e565b141561016c57600080fd5b3480156101a657600080fd5b506101ba6101b5366004610a0a565b6103a5565b005b3480156101c857600080fd5b506101dc6101d7366004610949565b610433565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b34801561021d57600080fd5b506101ba61022c366004610a0a565b610615565b34801561023d57600080fd5b506101ba61024c366004610a4b565b610670565b34801561025d57600080fd5b506101ba61026c366004610ae0565b6106fe565b34801561027d57600080fd5b506101ba61028c366004610afb565b61076e565b34801561029d57600080fd5b506101ba6102ac366004610a0a565b6107ff565b6101ba6102bf366004610925565b6108ad565b3480156102d057600080fd5b506101ba60006001819055600355565b3480156102ec57600080fd5b506101ba6102fb366004610925565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006001546000141561038357600354610360575060005460ff1690565b6001600360008282546103739190610c50565b909155505060025460ff16919050565b60018060008282546103959190610c50565b909155505060005460ff16919050565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063095ea7b3906044015b600060405180830381600087803b15801561041657600080fd5b505af115801561042a573d6000803e3d6000fd5b50505050505050565b60008061043e610342565b9050600381600581111561045457610454610c8e565b141561045f57600080fd5b600581600581111561047357610473610c8e565b14156105e9576005546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018690523390819063095ea7b390604401600060405180830381600087803b1580156104ed57600080fd5b505af1158015610501573d6000803e3d6000fd5b5060009250600191506105119050565b60405190808252806020026020018201604052801561053a578160200160208202803683370190505b509050868160008151811061055157610551610cbd565b60209081029190910101526005546040517fa71604e800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063a71604e8906105b49085908590600401610bb1565b600060405180830381600087803b1580156105ce57600080fd5b505af11580156105e2573d6000803e3d6000fd5b5050505050505b507f150b7a02000000000000000000000000000000000000000000000000000000009695505050505050565b6040517f47e7ef2400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390528416906347e7ef24906044016103fc565b6040517fa71604e800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063a71604e8906106c690869086908690600401610b3f565b600060405180830381600087803b1580156106e057600080fd5b505af11580156106f4573d6000803e3d6000fd5b5050505050505050565b600060019081557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6003556002805483927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009091169083600581111561076657610766610c8e565b021790555050565b600080548591907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660018360058111156107ab576107ab610c8e565b021790555060018381556002805484927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909116908360058111156107f2576107f2610c8e565b0217905550600355505050565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063095ea7b390604401602060405180830381600087803b15801561086f57600080fd5b505af1158015610883573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a791906109e8565b50505050565b8073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156108f557600080fd5b505af1158015610909573d6000803e3d6000fd5b505050505050565b80356006811061092057600080fd5b919050565b60006020828403121561093757600080fd5b813561094281610cec565b9392505050565b60008060008060006080868803121561096157600080fd5b853561096c81610cec565b9450602086013561097c81610cec565b935060408601359250606086013567ffffffffffffffff808211156109a057600080fd5b818801915088601f8301126109b457600080fd5b8135818111156109c357600080fd5b8960208285010111156109d557600080fd5b9699959850939650602001949392505050565b6000602082840312156109fa57600080fd5b8151801515811461094257600080fd5b600080600060608486031215610a1f57600080fd5b8335610a2a81610cec565b92506020840135610a3a81610cec565b929592945050506040919091013590565b60008060008060608587031215610a6157600080fd5b8435610a6c81610cec565b93506020850135610a7c81610cec565b9250604085013567ffffffffffffffff80821115610a9957600080fd5b818701915087601f830112610aad57600080fd5b813581811115610abc57600080fd5b8860208260051b8501011115610ad157600080fd5b95989497505060200194505050565b600060208284031215610af257600080fd5b61094282610911565b60008060008060808587031215610b1157600080fd5b610b1a85610911565b935060208501359250610b2f60408601610911565b9396929550929360600135925050565b73ffffffffffffffffffffffffffffffffffffffff841681526040602082015281604082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115610b9457600080fd5b8260051b8085606085013760009201606001918252509392505050565b60006040820173ffffffffffffffffffffffffffffffffffffffff851683526020604081850152818551808452606086019150828701935060005b81811015610c0857845183529383019391830191600101610bec565b5090979650505050505050565b600082610c4b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082821015610c89577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610d0e57600080fd5b5056fea2646970667358221220c149a668a386b0822d1cf2958214b35e04940e3407ce909b188d2fdaf8de041e64736f6c63430008060033";

type ContractBasedUserConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ContractBasedUserConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ContractBasedUser__factory extends ContractFactory {
  constructor(...args: ContractBasedUserConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractBasedUser> {
    return super.deploy(overrides || {}) as Promise<ContractBasedUser>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ContractBasedUser {
    return super.attach(address) as ContractBasedUser;
  }
  override connect(signer: Signer): ContractBasedUser__factory {
    return super.connect(signer) as ContractBasedUser__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ContractBasedUserInterface {
    return new utils.Interface(_abi) as ContractBasedUserInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ContractBasedUser {
    return new Contract(address, _abi, signerOrProvider) as ContractBasedUser;
  }
}
