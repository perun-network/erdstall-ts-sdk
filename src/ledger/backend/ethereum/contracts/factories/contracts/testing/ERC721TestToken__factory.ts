/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ERC721TestToken,
  ERC721TestTokenInterface,
} from "../../../contracts/testing/ERC721TestToken";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "ERC721IncorrectOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ERC721InsufficientApproval",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC721InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "ERC721InvalidOperator",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "ERC721InvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC721InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC721InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ERC721NonexistentToken",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "reset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum BehaviorSelect.Mode",
        name: "mode_",
        type: "uint8",
      },
    ],
    name: "setMode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum BehaviorSelect.Mode",
        name: "before_",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "countdown_",
        type: "uint256",
      },
      {
        internalType: "enum BehaviorSelect.Mode",
        name: "after_",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "resetCount_",
        type: "uint256",
      },
    ],
    name: "setModeWithCountdown",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405180604001604052806008815260200167546573742037323160c01b815250604051806040016040528060038152602001621514d560ea1b81525081600090816200006091906200011f565b5060016200006f82826200011f565b505050620001eb565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000a357607f821691505b602082108103620000c457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200011a576000816000526020600020601f850160051c81016020861015620000f55750805b601f850160051c820191505b81811015620001165782815560010162000101565b5050505b505050565b81516001600160401b038111156200013b576200013b62000078565b62000153816200014c84546200008e565b84620000ca565b602080601f8311600181146200018b5760008415620001725750858301515b600019600386901b1c1916600185901b17855562000116565b600085815260208120601f198616915b82811015620001bc578886015182559484019460019091019084016200019b565b5085821015620001db5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61191d80620001fb6000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c80636352211e116100b2578063b88d4fde11610081578063d826f88f11610066578063d826f88f1461026b578063de836ebd1461027a578063e985e9c51461028d57600080fd5b8063b88d4fde14610245578063c87b56dd1461025857600080fd5b80636352211e146101f657806370a082311461020957806395d89b411461022a578063a22cb4651461023257600080fd5b806321175b4a116100ee57806321175b4a146101aa57806323b872dd146101bd57806342842e0e146101d057806354ed9e32146101e357600080fd5b806301ffc9a71461012057806306fdde0314610148578063081812fc1461015d578063095ea7b314610195575b600080fd5b61013361012e36600461137a565b6102d6565b60405190151581526020015b60405180910390f35b6101506103bb565b60405161013f9190611405565b61017061016b366004611418565b61044d565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161013f565b6101a86101a336600461145a565b610483565b005b6101a86101b8366004611493565b610492565b6101a86101cb3660046114ae565b610500565b6101a86101de3660046114ae565b61053b565b6101a86101f13660046114ea565b61055b565b610170610204366004611418565b6105ec565b61021c61021736600461152e565b6105f7565b60405190815260200161013f565b610150610677565b6101a8610240366004611549565b610686565b6101a86102533660046115b4565b610691565b610150610266366004611418565b6106ce565b6101a860006007819055600955565b6101a86102883660046116ae565b610743565b61013361029b366004611734565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260056020908152604080832093909416825291909152205460ff1690565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061036957507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806103b557507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060600080546103ca90611767565b80601f01602080910402602001604051908101604052809291908181526020018280546103f690611767565b80156104435780601f1061041857610100808354040283529160200191610443565b820191906000526020600020905b81548152906001019060200180831161042657829003601f168201915b5050505050905090565b600061045882610778565b5060008281526004602052604090205473ffffffffffffffffffffffffffffffffffffffff166103b5565b61048e8282336107d7565b5050565b60006007557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600955600880548291907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660018360058111156104f8576104f86117ba565b021790555050565b600061050a6107e4565b90506002816005811115610520576105206117ba565b0361052a57600080fd5b61053584848461084a565b50505050565b61055683838360405180602001604052806000815250610691565b505050565b600680548591907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001836005811115610598576105986117ba565b02179055506007839055600880548391907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660018360058111156105df576105df6117ba565b0217905550600955505050565b60006103b582610778565b600073ffffffffffffffffffffffffffffffffffffffff821661064e576040517f89c62b64000000000000000000000000000000000000000000000000000000008152600060048201526024015b60405180910390fd5b5073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b6060600180546103ca90611767565b61048e338383610935565b600061069b6107e4565b905060028160058111156106b1576106b16117ba565b036106bb57600080fd5b6106c785858585610a32565b5050505050565b60606106d982610778565b5060006106f160408051602081019091526000815290565b90506000815111610711576040518060200160405280600081525061073c565b8061071b84610a49565b60405160200161072c9291906117e9565b6040516020818303038152906040525b9392505050565b60005b81811015610535576107708484848481811061076457610764611818565b90506020020135610b07565b600101610746565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff16806103b5576040517f7e27328900000000000000000000000000000000000000000000000000000000815260048101849052602401610645565b6105568383836001610bb8565b600060075460000361082757600954600003610804575060065460ff1690565b6001600960008282546108179190611847565b909155505060085460ff16919050565b60016007600082825461083a9190611847565b909155505060065460ff16919050565b73ffffffffffffffffffffffffffffffffffffffff821661089a576040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260006004820152602401610645565b60006108a7838333610d83565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610535576040517f64283d7b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80861660048301526024820184905282166044820152606401610645565b73ffffffffffffffffffffffffffffffffffffffff821661099a576040517f5b08ba1800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602401610645565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526005602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610a3d848484610500565b61053584848484610f00565b60606000610a56836110f0565b600101905060008167ffffffffffffffff811115610a7657610a76611585565b6040519080825280601f01601f191660200182016040528015610aa0576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610aaa57509392505050565b73ffffffffffffffffffffffffffffffffffffffff8216610b57576040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260006004820152602401610645565b6000610b6583836000610d83565b905073ffffffffffffffffffffffffffffffffffffffff811615610556576040517f73c6ac6e00000000000000000000000000000000000000000000000000000000815260006004820152602401610645565b8080610bd9575073ffffffffffffffffffffffffffffffffffffffff821615155b15610d2e576000610be984610778565b905073ffffffffffffffffffffffffffffffffffffffff831615801590610c3c57508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015610c7b575073ffffffffffffffffffffffffffffffffffffffff80821660009081526005602090815260408083209387168352929052205460ff16155b15610cca576040517fa9fbf51f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610645565b8115610d2c57838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60008281526002602052604081205473ffffffffffffffffffffffffffffffffffffffff90811690831615610dbd57610dbd8184866111d2565b73ffffffffffffffffffffffffffffffffffffffff811615610e3357610de7600085600080610bb8565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260036020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190555b73ffffffffffffffffffffffffffffffffffffffff851615610e7c5773ffffffffffffffffffffffffffffffffffffffff85166000908152600360205260409020805460010190555b60008481526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff89811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b73ffffffffffffffffffffffffffffffffffffffff83163b15610535576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063150b7a0290610f75903390889087908790600401611881565b6020604051808303816000875af1925050508015610fce575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610fcb918101906118ca565b60015b61105d573d808015610ffc576040519150601f19603f3d011682016040523d82523d6000602084013e611001565b606091505b508051600003611055576040517f64a0ae9200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610645565b805181602001fd5b7fffffffff0000000000000000000000000000000000000000000000000000000081167f150b7a0200000000000000000000000000000000000000000000000000000000146106c7576040517f64a0ae9200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610645565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611139577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611165576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061118357662386f26fc10000830492506010015b6305f5e100831061119b576305f5e100830492506008015b61271083106111af57612710830492506004015b606483106111c1576064830492506002015b600a83106103b55760010192915050565b6111dd838383611282565b6105565773ffffffffffffffffffffffffffffffffffffffff8316611231576040517f7e27328900000000000000000000000000000000000000000000000000000000815260048101829052602401610645565b6040517f177e802f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316600482015260248101829052604401610645565b600073ffffffffffffffffffffffffffffffffffffffff83161580159061134157508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611310575073ffffffffffffffffffffffffffffffffffffffff80851660009081526005602090815260408083209387168352929052205460ff165b80611341575060008281526004602052604090205473ffffffffffffffffffffffffffffffffffffffff8481169116145b949350505050565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461137757600080fd5b50565b60006020828403121561138c57600080fd5b813561073c81611349565b60005b838110156113b257818101518382015260200161139a565b50506000910152565b600081518084526113d3816020860160208601611397565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061073c60208301846113bb565b60006020828403121561142a57600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461145557600080fd5b919050565b6000806040838503121561146d57600080fd5b61147683611431565b946020939093013593505050565b80356006811061145557600080fd5b6000602082840312156114a557600080fd5b61073c82611484565b6000806000606084860312156114c357600080fd5b6114cc84611431565b92506114da60208501611431565b9150604084013590509250925092565b6000806000806080858703121561150057600080fd5b61150985611484565b93506020850135925061151e60408601611484565b9396929550929360600135925050565b60006020828403121561154057600080fd5b61073c82611431565b6000806040838503121561155c57600080fd5b61156583611431565b91506020830135801515811461157a57600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080600080608085870312156115ca57600080fd5b6115d385611431565b93506115e160208601611431565b925060408501359150606085013567ffffffffffffffff8082111561160557600080fd5b818701915087601f83011261161957600080fd5b81358181111561162b5761162b611585565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561167157611671611585565b816040528281528a602084870101111561168a57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806000604084860312156116c357600080fd5b6116cc84611431565b9250602084013567ffffffffffffffff808211156116e957600080fd5b818601915086601f8301126116fd57600080fd5b81358181111561170c57600080fd5b8760208260051b850101111561172157600080fd5b6020830194508093505050509250925092565b6000806040838503121561174757600080fd5b61175083611431565b915061175e60208401611431565b90509250929050565b600181811c9082168061177b57607f821691505b6020821081036117b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600083516117fb818460208801611397565b83519083019061180f818360208801611397565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b818103818111156103b5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600073ffffffffffffffffffffffffffffffffffffffff8087168352808616602084015250836040830152608060608301526118c060808301846113bb565b9695505050505050565b6000602082840312156118dc57600080fd5b815161073c8161134956fea26469706673582212201c44258c3219ea631067985379b66dfbf9fb43b64c0721a16e23c0767676125e64736f6c63430008180033";

type ERC721TestTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721TestTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721TestToken__factory extends ContractFactory {
  constructor(...args: ERC721TestTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ERC721TestToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERC721TestToken__factory {
    return super.connect(runner) as ERC721TestToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721TestTokenInterface {
    return new Interface(_abi) as ERC721TestTokenInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ERC721TestToken {
    return new Contract(address, _abi, runner) as unknown as ERC721TestToken;
  }
}
