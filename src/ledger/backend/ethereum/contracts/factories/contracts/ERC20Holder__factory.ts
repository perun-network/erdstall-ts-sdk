/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ERC20Holder,
  ERC20HolderInterface,
} from "../../contracts/ERC20Holder";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "erdstall",
        type: "address",
      },
      {
        internalType: "address",
        name: "template",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "_chainID",
        type: "uint16",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CallerIsNotErdstall",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyDeposit",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "origin",
        type: "uint16",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "localID",
        type: "bytes32",
      },
    ],
    name: "ForeignAssetContractDeployed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "origin_",
        type: "uint16",
      },
      {
        internalType: "bytes32",
        name: "localID",
        type: "bytes32",
      },
    ],
    name: "deployedToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "erdstall",
    outputs: [
      {
        internalType: "contract Erdstall",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "foreignAssets",
    outputs: [
      {
        internalType: "bytes32",
        name: "localID",
        type: "bytes32",
      },
      {
        internalType: "uint16",
        name: "origin",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "origin",
        type: "uint16",
      },
      {
        internalType: "bytes32",
        name: "localID",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "value",
        type: "uint256[]",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61010060405234801561001157600080fd5b50604051610da3380380610da383398101604081905261003091610082565b606092831b6001600160601b0319908116608052600060a0529190921b1660c05260f01b6001600160f01b03191660e0526100d0565b80516001600160a01b038116811461007d57600080fd5b919050565b60008060006060848603121561009757600080fd5b6100a084610066565b92506100ae60208501610066565b9150604084015161ffff811681146100c557600080fd5b809150509250925092565b60805160601c60a05160f81c60c05160601c60e05160f01c610c7a61012960003960008181610463015261058c0152600061060d0152600061052001526000818160da0152818161039f01526104f10152610c7a6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806347e7ef241161005057806347e7ef24146100fc5780636ede623814610111578063d1beaffa1461015457600080fd5b80632448cd0c1461006c578063411f925c146100d5575b600080fd5b6100ab61007a366004610adb565b60009182526020908152604080832083529082905290205473ffffffffffffffffffffffffffffffffffffffff1690565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100ab7f000000000000000000000000000000000000000000000000000000000000000081565b61010f61010a366004610a8f565b610167565b005b61013c61011f366004610a6d565b6001602081905260009182526040909120805491015461ffff1682565b6040805192835261ffff9091166020830152016100cc565b61010f610162366004610af7565b610387565b8061019e576040517f95b66fe900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600160205260409020546102af576040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810182905273ffffffffffffffffffffffffffffffffffffffff8316906323b872dd90606401602060405180830381600087803b15801561023c57600080fd5b505af1158015610250573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102749190610ab9565b6102aa576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610336565b6040517f9dc29fac0000000000000000000000000000000000000000000000000000000081523360048201526024810182905273ffffffffffffffffffffffffffffffffffffffff831690639dc29fac90604401600060405180830381600087803b15801561031d57600080fd5b505af1158015610331573d6000803e3d6000fd5b505050505b60408051600180825281830190925260009160208083019080368337019050509050818160008151811061036c5761036c610c15565b6020026020010181815250506103828382610433565b505050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146103f6576040517f164cbd7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806104038787610587565b91509150801561041e576104198286868661074f565b61042a565b61042a82868686610856565b50505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260016020526040812080548291906104a2577f0000000000000000000000000000000000000000000000000000000000000000925073ffffffffffffffffffffffffffffffffffffffff851691506104b4565b6001810154815461ffff909116935091505b6040517fe83fd41100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063e83fd4119061054e9033907f000000000000000000000000000000000000000000000000000000000000000090889088908b90600401610b95565b600060405180830381600087803b15801561056857600080fd5b505af115801561057c573d6000803e3d6000fd5b505050505050505050565b6000807f000000000000000000000000000000000000000000000000000000000000000061ffff168461ffff1614156105c557508190506001610748565b600084815260208481526040808320808452918390529091205473ffffffffffffffffffffffffffffffffffffffff168015610608579250600091506107489050565b6106317f00000000000000000000000000000000000000000000000000000000000000006108d3565b60008381526020818152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8616908117909155815180830183528a815261ffff8c81168286019081529286526001948590529290942093518455519290910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000169290911691909117905590506106e68161099f565b6040805173ffffffffffffffffffffffffffffffffffffffff8316815261ffff881660208201529081018690527f4a5d13431938ce6a6ac4346b8066a52855a261cc4b57a83cffc41f961f9eb9519060600160405180910390a1925060009150505b9250929050565b60008282600081811061076457610764610c15565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301526020909202939093013560248401819052935087169163a9059cbb9150604401602060405180830381600087803b1580156107e157600080fd5b505af11580156107f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108199190610ab9565b61084f576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b60008282600081811061086b5761086b610c15565b6040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152602090920293909301356024840181905293508716916340c10f19915060440161054e565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f0905073ffffffffffffffffffffffffffffffffffffffff811661099a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640160405180910390fd5b919050565b6040517ff57b0182000000000000000000000000000000000000000000000000000000008152606060048201526000606482018190526080602483015260848201526012604482015273ffffffffffffffffffffffffffffffffffffffff82169063f57b01829060a401600060405180830381600087803b158015610a2357600080fd5b505af115801561084f573d6000803e3d6000fd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461099a57600080fd5b803561ffff8116811461099a57600080fd5b600060208284031215610a7f57600080fd5b610a8882610a37565b9392505050565b60008060408385031215610aa257600080fd5b610aab83610a37565b946020939093013593505050565b600060208284031215610acb57600080fd5b81518015158114610a8857600080fd5b60008060408385031215610aee57600080fd5b610aab83610a5b565b600080600080600060808688031215610b0f57600080fd5b610b1886610a5b565b945060208601359350610b2d60408701610a37565b9250606086013567ffffffffffffffff80821115610b4a57600080fd5b818801915088601f830112610b5e57600080fd5b813581811115610b6d57600080fd5b8960208260051b8501011115610b8257600080fd5b9699959850939650602001949392505050565b600060a0820173ffffffffffffffffffffffffffffffffffffffff88168352602060ff88168185015261ffff8716604085015285606085015260a0608085015281855180845260c086019150828701935060005b81811015610c0557845183529383019391830191600101610be9565b50909a9950505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212201731a14e0f4bf9a34a0e2e887740612ad554a470def70ac262a31ec73d32f54e64736f6c63430008060033";

type ERC20HolderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20HolderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Holder__factory extends ContractFactory {
  constructor(...args: ERC20HolderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    erdstall: PromiseOrValue<string>,
    template: PromiseOrValue<string>,
    _chainID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20Holder> {
    return super.deploy(
      erdstall,
      template,
      _chainID,
      overrides || {}
    ) as Promise<ERC20Holder>;
  }
  override getDeployTransaction(
    erdstall: PromiseOrValue<string>,
    template: PromiseOrValue<string>,
    _chainID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      erdstall,
      template,
      _chainID,
      overrides || {}
    );
  }
  override attach(address: string): ERC20Holder {
    return super.attach(address) as ERC20Holder;
  }
  override connect(signer: Signer): ERC20Holder__factory {
    return super.connect(signer) as ERC20Holder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20HolderInterface {
    return new utils.Interface(_abi) as ERC20HolderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Holder {
    return new Contract(address, _abi, signerOrProvider) as ERC20Holder;
  }
}
